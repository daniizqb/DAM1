Estructura Programa C

	-Comandos del preprocesador
	
		Librerias
		Macros
		
	-Definicion de constantes
	
		#define nombre_constante valor
		#define PI 3.1415
		#define NREAL 7.8
	
	-Definicion de tipos
	
	-Declaracion de prototipos (Cabeceras de funciones)
	
	-Declaracion de variables globales (!!!DANGER!!!)
	
	-Funcion main() {
		
		Declaracion de variables locales
		
		Sentencias de programacion
		
	}
	
	-Declaracion y cuerpo de las funciones
	
Comentarios

	-Comentario de una sola linea: //
	
	-Comentario en bloque: /*Contenido*/
	
Tipos de datos

	-char: char car;
	
	-entero:
		
		short (entero corto -32k a 32k)
	
		int (entero -2 147 785 648)  DEFAULT
	 
		long (entero largo)
	
	-reales:
		
		float
	
		double	DEFAULT
	
		long double
	
	-booleanos
	
		0=false
		
		<>0=true
		
	-unsigned: no permite numeros negativos
	
Declarar variables

	-tipo nombre_variables [valor];
	
	-float nReal=0;
	
	-char cadena [TAM]="";

		cadena[0]='p';
		cadena[0]='e';
		cadena[0]='p';
		cadena[0]='e';
		cadena[0]='\0';
		
		-asignar cadenas

			#include <string.h>
			strcpy(cadena,"	PEPE");

		-comparar cadenas

			strcmp(cadena1,cadena2) => obtiene un 0 si ambas cadenas son iguales, >0 si cadena1 es mayor que cadena 2, <0 si cadena2 es mayor que cadena1
	
Peculiaridades

	-no booleanos
	
	-no cadenas nativas
	
	-al crear cadena poner de maximo un numero de mas
	
Operadores

	Asignacion: =
	
	Artimeticos: +, -, *, / (divisiones asignada a entero trunca), %
	
		Incremento: ++ Postincremento=a++, Preincremento=++a
	
		Decrementos: --, Postincremento=a++, Preincremento=++a
	
	Relacionales: > >= < <= != ==
	
	Logicos: && (and), || (or), ! (not)
	
	Conversiones: 
	
		Inplicita: Operadores de rango mas bajo automaticamente se convierten en mas alto
		
		Explicita: a=(short)b;

Estructura de control

	?:

		condicion ? expresion(true) : expresion(false);

	if/si
		if (condicion)
			una instruccion;

		if (condicion) {
			instrucciones;
		}

		if (condicion) {
			instrucciones
		}else{
			instrucciones
		}

	switch/segun
		switch expresion(solo enteros o char){
			case valor:instrucciones[break;]
			case valor:instrucciones[break;]
			[default:instrucciones]
		}

Salida de datos

	printf("Cadena de control"[,argumentos])
		
		cadena de control:	
					-literales
					-especificador de formato (acompanados de %)
						-%d short int long
						-%hd short
						-%f float double
						-%c char
						-%s alfanumericos/cadena
					-secuencias de escape:
						-\n salto de linea
						-\t tabula
						-\a pitido

		reglas:
			-tantos especificadores de formato como argumento
		Ejemplo: 
			printf("Hola Pepe\n Hola Juan");
			printf("%d",num);

	putchar() | Igual que printf("%c"car)

		putchar(car);

	puts() | Igual que printf("%s\n",cadena)

		puts(cadena);

Entrada de datos

	scanf("Cadena de control", lista de variables)

		cadena de control:
					-especificador de formato
						-%d short int long
						-%hd short
						-%f float double
						-%c char
						-%s alfanumericos/cadena

		reglas:
			-si es cadena no se pone &
			-borrar buffer despues de cada scanf
		Ejemplo:
			scanf("%d",&num);

	getchar() | identico a scanf("%c")

		car=''
		car=getchar()

	gets() | no corta cadena en espacios

		gets(cadena);

Bucles

	while

		while (condicion)
			instruccion;

		while (condicion){
			instrucciones;
		}

	do (mientras la condicion se cumpla)

		do {
			instrucciones
		}while (condicion);

	for (mientras no supere valor final)

		for (inicializacion; condicion; incremento)
			instruccion;

		for (inicializacion; condicion; incremento) {
			instrucciones;
		}

		Ejemplo:

			for (i=1;i<=10;(i=i+1,++i,i++))
			
Arrays

	Una dimension

		tipo nombrearray [tamano];

			char arrayC [20];

			int arrayN [20];

			int arrayN [5]={0,0,0,0,0};

			int arrayN []={0,0,0};

			char arrayC [] = {'j','u','a','n'};

		acceso

			arrayC [posicion a la que acceder];

	Dos dimensiones

		tipo matrixNum [TAMFIL][TAMCOL];

		int matrixNum [3][5] = {{3,5,8}{5,8,98,3,2}}

			X X X X X
			X X X X X
			X X X X X

		inicializacion

			int matrixNum [iF][iC];

			for (i=0;i<iC;i++)
				for (j=0;i<iF;j++)
					matrixNum [iF][iC] = 0;

		restricciones

			-hay que poner el tamano del segundo campo siempres

char matriz [4] [7]

printf("%c",matriz[3][7])

printf("%s",matriz[1])

Funcion: Su objetivo es obtener un valor

	Internas: En el mismo fuente del programacion

	Externas: Librerias

	Sintaxis:

		[tipo.retorno] nombre.funcion ([lista de parametros]) {

			cuerpo.funcion; -> instrucciones
			returne expresion; 

		}

Procedimiento: Su objetivo es realizar una tarea plus obtener valores a traves de unos determinados parametros

parametros

		por valor: es aquel que aunque su valor se modifique dentro de la funcion una vez que la funcion termina ese parametro permanece con dicho valor.

			main () {
				int numero=0;

				numero=7;
				imprimirNum(numero);
				printf("%d",numero);

				return 0;
			}

			void imprimirNum (int num) {
				num+=1;
				printf("%d",num);

				return;
			}

		por referencia: si su valor se modifica se guarda dicho valor modificado

			main () {
				areaTP (b,a,&area);
				printf(".2f",area);

				return 0;
			}

			void areaTP (int base, int altura, float *area) {
				*area = (float) base * altura / 2;
			}

			main () {
				char mensaje [] = "Pepe";
				impM (mensaje);
				printf("%s",mensaje);

				return 0;
			}

			void impM (const mensaje []) {
				printf("%s",mensaje);
				strcpy(mensaje,"Hola");
				printf("Modificada %s",mensaje);
			}

ctype

	isalpha() si es letra dara true
	isalnum() si es letra o num dara true
	isdigi() si es num dara true
	isupper() si es mayus dara true
	islower() si no es mayus dara true
	isspace() si es espacio true
	ispunct() si es signo de puntuacion true
	toupper() convierte char en mayus
	tolower() convierte char en minus

string

	strcpy() asignar cadenas
	strcmp() si las cadenas son iguales da 0 si la c1 es mayor el valor es mayor q 0 si la c2 es mayor menor q 0
	strlen() devuelve longitud de cadena
	strncpy() copia el numero de caracteres q indiquemos de la segunda cadena a la primera cadena sobrescribiendo lo que hay tenia la cadena1
	strcat() concatena la cadena del segundo parametro a la del primero
	strncat() concatena la cadena del segundo parametro a la del primero pero solo hasta el numero que indiquemos
	strncmp() compara dos cadenas hasta el numero que indiquemos
	stricmp() compara cadenas sin tener en cuenta mayus y minus
	strncmp() compara hasta un numero que indiquiemos sin tener en cuenta las mayusculas
	memset(str,char,num) rellenar de forma automatica cadenas / rellena la cadena de el caracter seleccionado tantas posiciones como se indique
	strrev() invierte una cadena
	strlwr() convierte cadena en minuscula
	strupr() convierte cadena en mayuscula
	strchr() permite buscar caracteres en una cadena y cuando la encuentra devuelve el resto de la cadena a partir de dicho caracter
	strrchr() permite buscar caracteres en una cadena y cuando la encuentra devuelve el resto de la cadena a partir de dicho caracter de derecha a izq
	strcspn() busca los caracteres de una cadena en la otra y devuelve el numero de la posicion del caracter menor que encuentre, si no encuetra devuleve strlen
	strpbrk() busca los caracteres de la primera cadena en la segunda y devuelve la primera cadena a partir del char que encuentra
	strstr() busca cadena 2 en cadena 1 y devuelve lo que haya a partir de la cadena incluyendo cadena 2

math

	ceil(num) eleva al numero entero superior
	floor(num) trunca el numero
	fabs(num) valor absoluto de un numero (siempre el resultado es un numero positivo)
	pow(num1,num2) hace una potencia (num1^num2)
	sqrt(num) raiz cuadrada

stdlib

	rand() num aleatorio (siempre el mismo)
	srand() establece semilla del random
	atoi convierte cadena en entero
	atof convierte cadena en real


Una estructura es un tipo de dato que define el usuario, se compone de varios datos

	Ejemplo

		struct nombre.estructura {
			tipo.miembro	nombre.miebro;
		}

		struct cd {
			char nombreGrupo [25];
			char nomCD [20];
			char fecha [11];
			int num;
		}

		struct cd cd1,cd2;
		struct cd cd1 = {"","","",0}

		nombre.variable.miermbro

		cd1.nombreGrupo = 7;

	Estrucuras anidadas

		stuct nombreCompuesto {
			char nombre1 [20];
			char nombre2 [20];
		}

		struct cd {
			struct nombreCompuesto nombreGrupo;
			char nombreGrupo [25];
			char nomCD [20];
			char fecha [11];
			int num;
		}

Ficheros

	Declarar Ficheros

		FILE *nombrefichero;
		nombrefichero = fopen (nombrefichexterno,modoapertura);

	MODOS DE APERTURA("van entre comillas")
		1."r"----> modo lectura (el fichero debe existir)
		2."w"----> modo escritura (si existe, machaca el contenido---> empieza a escirbir desde el principio // Si el fichero no existe lo crea)
		3."a"----> añafir (Si existe el fichero respeta su contenido previo y añade al final // si no existe el fichero lo crea)
		4."r+"----> modo lectura/escritura (el fichero debe existir // modo a emplear cuando deseamos modificar algun registro)
		5."w+"----> modo lectura/escritura (de primeras te borra todo el fichero // si no existe el fichero lo crea)
		6."a+"----> modo lectura/escritura (pero a la hora de escribir lo escribe al final)
		PARA CERRAR FICHERO
		fclose(nombre_interno)

	Ejemplo:
	main(){
	FILE *fich;
	fich = fopen("texto.txt","w");
	fclose(fich);
	return 0;
	}

	PROCEDIMIENTO PARA ESCRIBIR EN EL FICHERO
		fputc(caracter_a_escribir,nombre_fichero_interno)-------------->fputc('x',fich)

	FUNCIONES FICHEROS
		fgetc(nombre_interno)

		fgets(cadena,nCar,nombre_interno)

		feof(nombre_interno) end of file

		rewind(nombre_interno) vuelve al principio del fichero

		fwrite(&estructura,tamano,numero_de_escrituras,nombre_interno)
				&cd1,sizeof(cd1),1,fich

		fread(&estructura,tamano,numero_de_escrituras,nombre_interno)

		fseek(nombre_interno,desplazamiento(ha de ser un long),origen)

			SEEK_SET 0
			SEEK_CUR 1
			SEEK_END 2

		rename(cadena.txt,fichCadena.txt)

		remove("cadena.txt")

time.h

	struct tm {
		int tm_sec; 0 - 59
		int tm_min;	0 - 59
		int tm_hour; 0 - 23
		int tm_mday; 1 - 31	dia del mes
		int tm_mon; 0 - 11 numero del mes
		int tm_year; -1900
		int tm_wday; 0 - 6
		int tm_yday; 0 - 365
		int tm_isdst; 0
	}

	time_t	tipo definido para las fechas (long)

	time(&arg) devuelve la fecha actual en segundos | time_t

		main {
			time_t fecha = 0;
			time(&fecha);
		}
		
	ctime(&arg) obtiene cadena de la fecha | time_t
		
		printf("%s",ctime(&fecha))

	localtime(&fecha) transforma tipo time_t a struct * tm | time_t

		struct tm*fechaS
		fechaS = localtime(&fecha)

	asctime(&arg) obtiene cadena de la fecha | struct * tm

	mktime(&arg) devuelve los segundo de una fecha

	strftime(buffer, longitud_buffer, cadenaControl, fecha(struct tm*))

		char buffer [6];
		strftime(buffer , 6, "%H:%M", localtime(&fecha));
		puts(buffer);